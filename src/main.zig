const std = @import("std");

const build = @import("build.zig");
const extract = @import("extract.zig");

pub fn main() !void {
    runCli() catch |err| {
        if (err == error.CommandLine)
            try std.io.getStdErr().writeAll(usage);
        return err;
    };
}

fn runCli() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    const allocator = gpa.allocator();
    defer std.debug.assert(gpa.deinit() == .ok);

    const args = try std.process.argsAlloc(allocator);
    defer std.process.argsFree(allocator, args);

    if (args.len < 1 + 1)
        return error.CommandLine;

    const command = args[1];

    if (std.mem.eql(u8, command, "-h") or std.mem.eql(u8, command, "--help"))
        return std.io.getStdOut().writeAll(usage);

    if (std.mem.eql(u8, command, "build")) {
        try build.runCli(allocator, args[2..]);
    } else if (std.mem.eql(u8, command, "extract")) {
        try extract.runCli(allocator, args[2..]);
    } else {
        return error.CommandLine;
    }
}

const usage =
    \\baller: A modding tool for Backyard Sports games.
    \\
    \\Usage:
    \\
    \\baller build <project> <target>
    \\
    \\    <project>  Path to project.txt, typically generated by baller extract.
    \\    <target>   Path to output file ending in .he0.
    \\
    \\baller extract <index> <target>
    \\
    \\    <index>    Path to index file ending in .he0.
    \\    <target>   Path to output directory.
    \\
;

test {
    _ = @import("tests.zig");
}
